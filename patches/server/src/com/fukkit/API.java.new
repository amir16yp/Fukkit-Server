package com.fukkit;

import com.mojang.minecraft.net.PacketType;
import com.mojang.minecraft.server.MinecraftServer;
import com.mojang.minecraft.server.NetworkManager;
import com.fukkit.cpe.CPETesting;
import com.fukkit.cpe.Environment;
import com.mojang.minecraft.level.Level;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.logging.LogRecord;
import java.util.logging.Logger;

public class API {
    private static API instance;
    private final MinecraftServer server;
    private static final Map<String, BiConsumer<CommandSender, String[]>> customCommands =  new HashMap<>();;
    private PluginManager pluginManager;
    private static Map<String, PrefixedLogger> pluginLoggers = new HashMap<>();
    private PermissionManager permissionManager;
    public static Logger serverLogger = Logger.getLogger("MinecraftServer");
    private String globalTexturePackURL; 

    private Environment defaulEnvironment;

    public void setEnvironment(Environment environment)
    {
        this.defaulEnvironment = environment;
        defaulEnvironment.broadcastToServer();
    }

    public Environment getEnvironment()
    {
        return this.defaulEnvironment;
    }


    public void setTexturePackURL(String url)
    {
        this.globalTexturePackURL = url;
    }

    public String getTexturePackURL()
    {
        return globalTexturePackURL;
    }

    public void broadcastTexturePack()
    {
        String packURL =getTexturePackURL();
        if (packURL != null)
        {
            if (!packURL.isEmpty())
            {
                this.getServer().broadcastPacketToCPEClients(PacketType.SET_MAP_ENV_URL, new Object[]{packURL});
            }
        }
    }

    public API(MinecraftServer server)
    {
        this.server = server;
        this.permissionManager = new PermissionManager();
        this.pluginManager = new PluginManager(server);

    }

    public PermissionManager getPermissionManager() {
        return permissionManager;
    }


    public void loadPlugins() {
        pluginManager.loadPlugins();
    }

    public void disablePlugins() {
        pluginManager.disablePlugins();
    }

    public void enablePlugins() {
        pluginManager.enablePlugins();
    }


    public JavaPlugin getPlugin(String name) {
        return pluginManager.getPlugin(name);
    }

    public List<JavaPlugin> getPlugins() {
        return pluginManager.getPlugins();
    }

    public static Logger getLogger(String pluginName) {
        return pluginLoggers.computeIfAbsent(pluginName, name -> {
            PrefixedLogger newLogger = new PrefixedLogger(serverLogger, "[" + name + "] ");
            newLogger.setParent(serverLogger);
            return newLogger;
        });
    }

    static class PrefixedLogger extends Logger {
        private final String prefix;

        PrefixedLogger(Logger parent, String prefix) {
            super(parent.getName() + "." + prefix.trim(), parent.getResourceBundleName());
            this.prefix = prefix;
            setParent(parent);
        }

        @Override
        public void log(LogRecord record) {
            LogRecord newRecord = new LogRecord(record.getLevel(), prefix + record.getMessage());
            newRecord.setLoggerName(record.getLoggerName());
            newRecord.setMillis(record.getMillis());
            newRecord.setParameters(record.getParameters());
            newRecord.setResourceBundle(record.getResourceBundle());
            newRecord.setResourceBundleName(record.getResourceBundleName());
            newRecord.setSequenceNumber(record.getSequenceNumber());
            newRecord.setSourceClassName(record.getSourceClassName());
            newRecord.setSourceMethodName(record.getSourceMethodName());
            newRecord.setThreadID(record.getThreadID());
            newRecord.setThrown(record.getThrown());
            super.log(newRecord);
        }
    }


    public static void initialize(MinecraftServer server) {
        if (instance == null) {
            instance = new API(server);
            server.getWorldManager().registerWorldCommand();
            //instance.permissionManager.registerPermissionCommands();
            //instance.pluginManager = new PluginManager(server);
            instance.setTexturePackURL(server.getProperties().getProperty("texture-pack"));;
            instance.registerDefaultCommands();
            instance.loadPlugins(); // Load plugins during initialization
            instance.enablePlugins(); // Enable plugins after loading
            CPETesting testing = new CPETesting();
        }


    }

    public static API getInstance() {
        if (instance == null) {
            throw new IllegalStateException("API not initialized. Call initialize() first.");
        }
        return instance;
    }

    public Player getPlayer(String name) {
        NetworkManager manager = getPlayerHandle(name);
        return manager != null ? new Player(manager) : null;
    }

    public NetworkManager getPlayerHandle(String name) {
        for (NetworkManager manager : this.server.networkManager) {
            if (manager != null && manager.playerName.equalsIgnoreCase(name)) {
                return manager;
            }
        }
        return null;
    }

    public void sendGlobalMessage(String msg) {
        this.server.broadcastPacket(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), msg});
    }

    public List<Player> getOnlinePlayers() {
        List<Player> players = new ArrayList<>();
        for (NetworkManager manager : this.server.networkManager) {
            if (manager != null) {
                players.add(new Player(manager));
            }
        }
        return players;
    }

    public void kickPlayer(String playerName, String reason) {
        NetworkManager player = getPlayerHandle(playerName);
        if (player != null) {
            player.kickPlayer(reason);
        }
    }

    public void banPlayer(String playerName) {
        this.server.e(playerName);
    }

    public void unbanPlayer(String playerName) {
        this.server.playerManager2.removePlayer(playerName);
    }

    public boolean isPlayerBanned(String playerName) {
        return this.server.playerManager2.containsPlayer(playerName);
    }

    public void opPlayer(String playerName) {
        this.server.f(playerName);
    }

    public void deopPlayer(String playerName) {
        this.server.g(playerName);
    }

    public boolean isPlayerOp(String playerName) {
        return this.server.playerManager1.containsPlayer(playerName);
    }

    public Level getMainLevel() {
        return this.server.mainLevel;
    }

    public void setBlock(int x, int y, int z, byte blockType) {
        Level level = getMainLevel();
        level.setTile(x, y, z, blockType);
        this.server.updateBlock(x, y, z);  // Notify clients of the block change
    }

    public byte getBlockType(int x, int y, int z) {
        return (byte) getMainLevel().getTile(x, y, z);
    }

    public void executeConsoleCommand(String command) {
        this.server.executeCommand(null, command);
    }

    public void processConsoleInput(String input) {
        serverLogger.info("Console command received: " + input);
        
        String[] parts = input.split("\\s+");
        String commandName = parts[0].toLowerCase();

        if (customCommands.containsKey(commandName)) {
            String[] args = new String[parts.length - 1];
            System.arraycopy(parts, 1, args, 0, args.length);
            getLogger("Server").info("Executing custom console command: " + commandName);
            customCommands.get(commandName).accept(new ConsoleSender(), args);
        } else {
            // If it's not a custom command, pass it to the server's default command handler
            getLogger("Server").info("Passing console command to default handler: " + commandName);
            server.executeCommand(null, input);
        }
    }
    
    public void processPlayerCommand(String input, Player player) {
        serverLogger.info("Player command received from " + player.getName() + ": " + input);
        
        String[] parts = input.split("\\s+");
        String commandName = parts[0].toLowerCase();

        if (customCommands.containsKey(commandName)) {
            String[] args = new String[parts.length - 1];
            System.arraycopy(parts, 1, args, 0, args.length);
            getLogger("Server").info("Executing custom player command from " + player.getName() + ": " + commandName);
            customCommands.get(commandName).accept(player, args);
        } else {
            if (player.isOp())
            {
                getLogger("Server").info("Passing player command from " + player.getName() + " to default handler: " + commandName);
                server.executeCommand(player.getHandle(), input);
            } else {
                player.sendMessage("Vanilla command requires OP!");
            }

        }
    }


    public void registerCommand(String commandName, BiConsumer<CommandSender, String[]> handler, String permission) {
        customCommands.put(commandName.toLowerCase(), (sender, args) -> {
            if (permissionManager.hasPermission(sender, permission)) {
                handler.accept(sender, args);
            } else {
                sender.sendMessage("You don't have permission to use this command.");
            }
        });
    }

    private void registerDefaultCommands()
    {
        this.permissionManager.registerPermissionCommands();
        this.getWorldManager().registerWorldCommand();
        this.registerCommand("plugins", this::handlePluginsCommand, "*");
        this.registerCommand("pl", this::handlePluginsCommand, "*");
        this.registerCommand("commands", this::handleListCommandsCommand, "*");
    }

    private void handleListCommandsCommand(CommandSender sender, String[] args) {
        if (customCommands.isEmpty()) {
            sender.sendMessage("No custom commands available.");
            return;
        }
    
        List<String> sortedCommands = new ArrayList<>(customCommands.keySet());
        Collections.sort(sortedCommands);
    
        sender.sendMessage("Available Commands:");
        for (String command : sortedCommands) {
            sender.sendMessage("  /" + command);
        }
    }
    
    private void handlePluginsCommand(CommandSender sender, String[] args) {
        List<JavaPlugin> plugins = this.pluginManager.getPlugins();
        if (plugins.size() == 0) {
            sender.sendMessage("No plugins are currently loaded.");
            return;
        }
    
        List<String> pluginInfos = new ArrayList<>();
        for (JavaPlugin plugin : plugins) {
            pluginInfos.add(plugin.getName());
        }
        Collections.sort(pluginInfos);
    
        sender.sendMessage("Loaded Plugins (" + plugins.size() + "):");
        for (String pluginInfo : pluginInfos) {
            sender.sendMessage("  " + pluginInfo);
        }
    }
    public final WorldManager getWorldManager() {
        return getServer().getWorldManager();
    }

    public MinecraftServer getServer() {
        return this.server;
    }

}