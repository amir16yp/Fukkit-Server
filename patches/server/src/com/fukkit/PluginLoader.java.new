package com.fukkit;

import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarFile;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;


public class PluginLoader {

    private static final String PLUGINS_FOLDER = "plugins";
    private static final Logger logger = Logger.getLogger("MinecraftServer");
    public static List<Plugin> plugins = new ArrayList<>();

    public static void loadPlugins() {
        try {
            File pluginsDir = new File(PLUGINS_FOLDER);

            if (!pluginsDir.exists() || !pluginsDir.isDirectory()) {
                logger.info("Plugins directory not found.");
                return;
            }

            File[] jarFiles = pluginsDir.listFiles(pathname -> pathname.isFile() && pathname.getName().endsWith(".jar"));

            if (jarFiles == null || jarFiles.length == 0) {
                logger.info("No plugin JAR files found.");
                return;
            }

            for (File jarFile : jarFiles) {
                URL[] urls = {jarFile.toURI().toURL()};
                URLClassLoader classLoader = new URLClassLoader(urls, PluginLoader.class.getClassLoader());

                JarFile jar = new JarFile(jarFile);
                Enumeration<? extends ZipEntry> entries = jar.entries();

                while (entries.hasMoreElements()) {
                    ZipEntry entry = entries.nextElement();
                    if (entry.getName().endsWith(".class")) {
                        String className = entry.getName().replace("/", ".").replace(".class", "");
                        Class<?> cls = classLoader.loadClass(className);

                        if (Plugin.class.isAssignableFrom(cls) && !cls.isInterface() && !java.lang.reflect.Modifier.isAbstract(cls.getModifiers())) {
                            Plugin pluginInstance = (Plugin) cls.getDeclaredConstructor().newInstance();
                            plugins.add(pluginInstance);
                            logger.info("Loaded plugin: " + className);
                        }
                    }
                }

                jar.close();
            }

            for (Plugin plugin : plugins) {
                plugin.init();
            }
        } catch (Exception e) {
            logger.warning(e.getMessage());
        }
    }
}