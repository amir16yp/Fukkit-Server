package com.fukkit;

import com.mojang.minecraft.level.Level;
import com.mojang.minecraft.level.LevelIO;
import com.mojang.minecraft.level.generator.LevelGenerator;
import com.mojang.minecraft.server.MinecraftServer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Logger;

public class WorldManager {
    private final MinecraftServer server;
    private Level activeWorld;
    private String activeWorldName;
    private final Logger logger;
    private final Map<String, Class<? extends LevelGenerator>> registeredGenerators;
    private final String backupFolder = "worldBackups";

    public WorldManager(MinecraftServer server) {
        this.server = server;
        this.logger = API.getLogger("WorldManager");
        this.registeredGenerators = new HashMap<>();
        this.registerDefaultGenerator();
        createBackupFolder();
    }

    private void createBackupFolder() {
        File folder = new File(backupFolder);
        if (!folder.exists()) {
            folder.mkdir();
            logger.info("Created world backups folder: " + backupFolder);
        }
    }

    private void registerDefaultGenerator() {
        registeredGenerators.put("default", LevelGenerator.class);
    }

    public void registerLevelGenerator(String name, Class<? extends LevelGenerator> generatorClass) {
        registeredGenerators.put(name, generatorClass);
        logger.info("Registered level generator: " + name);
    }

    public Level createWorld(String name, long seed, String generatorName) {
        File cwFile = new File(name + ".cw");
        File datFile = new File(name + "_level.dat");

        if ((server.useCWformat && cwFile.exists()) || (!server.useCWformat && datFile.exists())) {
            logger.warning("World " + name + " already exists!");
            return loadWorld(name);
        }

        Class<? extends LevelGenerator> generatorClass = registeredGenerators.getOrDefault(generatorName,
                LevelGenerator.class);
        LevelGenerator generator;
        try {
            generator = generatorClass.getConstructor(MinecraftServer.class, long.class).newInstance(server, seed);
        } catch (Exception e) {
            logger.warning("Failed to instantiate LevelGenerator " + generatorName + ". Using default.");
            generator = new LevelGenerator(server, seed);
        }

        Level newLevel = generator.generate(name);

        newLevel.creativeMode = true;
        newLevel.growTrees = server.getProperties().getProperty("grow-trees", "false").equals("true");
        newLevel.addListener$74652038(server);

        saveWorld(name, newLevel);

        logger.info("Created new world: " + name + " using generator: " + generatorName);
        return newLevel;
    }

    public Level loadWorld(String name) {
        if (activeWorldName != null && activeWorldName.equals(name)) {
            logger.info("World " + name + " is already loaded.");
            return activeWorld;
        }

        File cwFile = new File(name + ".cw");
        File datFile = new File(name + "_level.dat");

        Level level = null;

        if (server.useCWformat && cwFile.exists()) {
            try {
                level = ClassicWorldParser.loadClassicWorld(cwFile);
                logger.info("Loaded ClassicWorld: " + name);
            } catch (IOException e) {
                logger.severe("Failed to load ClassicWorld " + name + ": " + e.getMessage());
            }
        } else if (!server.useCWformat && datFile.exists()) {
            try {
                level = LevelIO.load(new FileInputStream(datFile));
                logger.info("Loaded world: " + name);
            } catch (Exception e) {
                logger.severe("Failed to load world " + name + ": " + e.getMessage());
            }
        }

        if (level != null) {
            setActiveWorld(name, level);
            return level;
        }

        logger.warning("World file for " + name + " does not exist in the preferred format.");
        return null;
    }

    public void unloadWorld(boolean save) {
        if (activeWorld == null) {
            logger.warning("No world is currently loaded.");
            return;
        }

        if (save) {
            saveWorld(activeWorldName, activeWorld);
        }

        activeWorld = null;
        activeWorldName = null;
        logger.info("Unloaded world: " + activeWorldName);
    }

    public void saveWorld(String name, Level level) {
        // Determine the primary and alternative formats
        boolean useCWFormat = server.useCWformat;
        File primaryFile = new File(name + (useCWFormat ? ".cw" : "_level.dat"));
        File alternativeFile = new File(name + (useCWFormat ? "_level.dat" : ".cw"));

        // Attempt to save in the primary format
        try {
            if (useCWFormat) {
                saveWorldAsClassicWorld(level, primaryFile);
            } else {
                saveWorldAsDat(level, primaryFile);
            }
            logger.info("Saved world in primary format: " + primaryFile.getName());
        } catch (IOException e) {
            logger.severe("Failed to save world in primary format: " + e.getMessage());
            logger.info("Attempting to save world in alternative format...");

            // Attempt to save in the alternative format
            try {
                if (useCWFormat) {
                    saveWorldAsDat(level, alternativeFile);
                } else {
                    saveWorldAsClassicWorld(level, alternativeFile);
                }
                logger.info("Saved world in alternative format: " + alternativeFile.getName());
            } catch (IOException ex) {
                logger.severe("Failed to save world in alternative format: " + ex.getMessage());
            }
        }
    }

    // Helper method to save world as ClassicWorld format
    private void saveWorldAsClassicWorld(Level level, File file) throws IOException {
        ClassicWorldParser.saveClassicWorld(level, file);
    }

    // Helper method to save world as .dat format
    private void saveWorldAsDat(Level level, File file) throws IOException {
        try (FileOutputStream fos = new FileOutputStream(file)) {
            LevelIO.save(level, fos);
        }
    }

    public Level getActiveWorld() {
        return activeWorld;
    }

    public String getActiveWorldName() {
        return activeWorldName;
    }

    private void setActiveWorld(String name, Level level) {
        if (activeWorld != null) {
            unloadWorld(true);
        }
        activeWorld = level;
        activeWorldName = name;
    }

    public void registerWorldCommand() {
        API.getInstance().registerCommand("world", (sender, args) -> {
            if (args.length < 1) {
                sender.sendMessage("Usage: /world <create|load|switch|list|delete|backup|restore> [worldname] [seed] [generator]");
                return;
            }

            String action = args[0].toLowerCase();

            switch (action) {
                case "create":
                    if (args.length < 2) {
                        sender.sendMessage("Usage: /world create <worldname> [seed] [generator]");
                        return;
                    }
                    String worldName = args[1];
                    long seed = args.length > 2 ? Long.parseLong(args[2]) : new Random().nextLong();
                    String generator = args.length > 3 ? args[3] : "default";
                    createWorld(worldName, seed, generator);
                    switchWorld(worldName);
                    break;
                case "load":
                case "switch":
                    if (args.length < 2) {
                        sender.sendMessage("Usage: /world " + action + " <worldname>");
                        return;
                    }
                    switchWorld(args[1]);
                    break;
                case "list":
                    listWorlds(sender);
                    listGenerators(sender);
                    break;
                case "delete":
                    if (args.length < 2) {
                        sender.sendMessage("Usage: /world delete <worldname>");
                        return;
                    }
                    deleteWorld(sender, args[1]);
                    break;
                case "backup":
                    if (args.length < 2) {
                        sender.sendMessage("Usage: /world backup <worldname>");
                        return;
                    }
                    backupWorld(sender, args[1]);
                    break;
                case "restore":
                    if (args.length < 2) {
                        sender.sendMessage("Usage: /world restore <worldname>");
                        return;
                    }
                    restoreWorld(sender, args[1]);
                    break;
                case "current":
                    showCurrentWorld(sender);
                    break;
                default:
                    sender.sendMessage(
                            "Unknown world command. Use create, load, switch, list, delete, backup, restore, or current.");
            }
        }, "world.mgr");
    }

    private void backupWorld(CommandSender sender, String worldName) {
        File levelFile = new File(worldName + "_level.dat");
        File cwFile = new File(worldName + ".cw");

        if (!levelFile.exists() && !cwFile.exists()) {
            sender.sendMessage("World '" + worldName + "' does not exist.");
            return;
        }

        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String backupName = worldName + "_" + timestamp;

        try {
            if (levelFile.exists()) {
                Files.copy(levelFile.toPath(), Paths.get(backupFolder, backupName + "_level.dat"));
            }
            if (cwFile.exists()) {
                Files.copy(cwFile.toPath(), Paths.get(backupFolder, backupName + ".cw"));
            }
            sender.sendMessage("World '" + worldName + "' has been backed up as '" + backupName + "'.");
            logger.info("Backed up world: " + worldName + " as " + backupName);
        } catch (IOException e) {
            sender.sendMessage("Failed to backup world '" + worldName + "'. Check server logs for details.");
            logger.severe("Failed to backup world: " + e.getMessage());
        }
    }

    private void restoreWorld(CommandSender sender, String worldName) {
        File backupFolder = new File(this.backupFolder);
        File[] backups = backupFolder.listFiles((dir, name) -> name.startsWith(worldName + "_"));

        if (backups == null || backups.length == 0) {
            sender.sendMessage("No backups found for world '" + worldName + "'.");
            return;
        }

        // Sort backups by date (newest first)
        Arrays.sort(backups, Comparator.comparingLong(File::lastModified).reversed());

        File latestBackup = backups[0];
        String backupName = latestBackup.getName().replace("_level.dat", "").replace(".cw", "");

        try {
            if (latestBackup.getName().endsWith("_level.dat")) {
                Files.copy(latestBackup.toPath(), Paths.get(worldName + "_level.dat"),
                        StandardCopyOption.REPLACE_EXISTING);
            } else if (latestBackup.getName().endsWith(".cw")) {
                Files.copy(latestBackup.toPath(), Paths.get(worldName + ".cw"), StandardCopyOption.REPLACE_EXISTING);
            }
            sender.sendMessage("World '" + worldName + "' has been restored from backup '" + backupName + "'.");
            logger.info("Restored world: " + worldName + " from backup " + backupName);

            // Reload the world if it's the active world
            if (worldName.equals(activeWorldName)) {
                switchWorld(worldName);
            }
        } catch (IOException e) {
            sender.sendMessage("Failed to restore world '" + worldName + "'. Check server logs for details.");
            logger.severe("Failed to restore world: " + e.getMessage());
        }
    }

    private void showCurrentWorld(CommandSender sender) {
        if (activeWorldName != null) {
            sender.sendMessage("Current active world: " + activeWorldName);
        } else {
            sender.sendMessage("No world is currently active.");
        }
    }

    private void deleteWorld(CommandSender sender, String worldName) {
        if (worldName.equals(activeWorldName)) {
            sender.sendMessage("Cannot delete the active world. Switch to another world first.");
            return;
        }

        File levelFile = new File(worldName + "_level.dat");
        if (!levelFile.exists()) {
            sender.sendMessage("World '" + worldName + "' does not exist.");
            return;
        }

        if (levelFile.delete()) {
            sender.sendMessage("World '" + worldName + "' has been deleted.");
            logger.info("Deleted world: " + worldName);
        } else {
            sender.sendMessage("Failed to delete world '" + worldName + "'. Check server logs for details.");
            logger.severe("Failed to delete world file: " + levelFile.getAbsolutePath());
        }
    }

    private void listWorlds(CommandSender sender) {
        File serverDir = new File(".");
        File[] datFiles = serverDir.listFiles((dir, name) -> name.endsWith("_level.dat"));
        File[] cwFiles = serverDir.listFiles((dir, name) -> name.endsWith(".cw"));

        if ((datFiles == null || datFiles.length == 0) && (cwFiles == null || cwFiles.length == 0)) {
            sender.sendMessage("No worlds found.");
            return;
        }

        Map<String, String> worldFormats = new HashMap<>();

        if (datFiles != null) {
            for (File file : datFiles) {
                String worldName = file.getName().replace("_level.dat", "");
                worldFormats.put(worldName, "DAT");
            }
        }

        if (cwFiles != null) {
            for (File file : cwFiles) {
                String worldName = file.getName().replace(".cw", "");
                if (worldFormats.containsKey(worldName)) {
                    worldFormats.put(worldName, "DAT+CW");
                } else {
                    worldFormats.put(worldName, "CW");
                }
            }
        }

        sender.sendMessage("Available worlds:");
        for (Map.Entry<String, String> entry : worldFormats.entrySet()) {
            String worldName = entry.getKey();
            String format = entry.getValue();
            String activeStatus = worldName.equals(activeWorldName) ? " (active)" : "";
            sender.sendMessage("- " + worldName + " [" + format + "]" + activeStatus);
        }
    }

    public void listGenerators(CommandSender sender) {
        sender.sendMessage("Available level generators:");
        for (String generatorName : registeredGenerators.keySet()) {
            sender.sendMessage("- " + generatorName);
        }
    }

    private void switchWorld(String worldName) {
        API.getInstance().sendGlobalMessage("Switching to world: " + worldName);

        // Load the world
        Level world = server.getWorldManager().loadWorld(worldName);

        if (world != null) {
            // Set the main level to the new world

            // Teleport all players to the new world's spawn point
            for (Player player : API.getInstance().getOnlinePlayers()) {
                player.teleport(world.xSpawn, world.ySpawn, world.zSpawn);
                player.kick("Server is changing worlds");
            }
            server.mainLevel = world;

            API.getInstance().sendGlobalMessage("Switched to world: " + worldName);
        } else {
            API.getInstance().sendGlobalMessage("Failed to load world: " + worldName);
        }
    }
}