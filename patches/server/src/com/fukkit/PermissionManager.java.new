package com.fukkit;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class PermissionManager {
    private final Map<String, Set<String>> playerPermissions;
    private final Set<String> opPermissions;
    private final File permissionsFile;

    public PermissionManager() {
        this.playerPermissions = new HashMap<>();
        this.opPermissions = new HashSet<>();
        this.permissionsFile = new File("permissions.txt");
        // Add default op permissions
        opPermissions.add("*"); // Wildcard permission for ops
        reloadPermissions();
        if (!this.permissionsFile.exists())
        {
            addPermission("*", "pluginslist");
            addPermission("*", "commandslist");
            savePermissions();
        }
    }

    
    private void savePermissions() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(permissionsFile))) {
            // Write player permissions
            for (Map.Entry<String, Set<String>> entry : playerPermissions.entrySet()) {
                String playerName = entry.getKey();
                for (String permission : entry.getValue()) {
                    writer.write("player:" + playerName + ":" + permission);
                    writer.newLine();
                }
            }

            // Write op permissions
            for (String opPermission : opPermissions) {
                writer.write("op:" + opPermission);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void reloadPermissions() {
        if (!permissionsFile.exists()) {
            return; // File does not exist; nothing to load
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(permissionsFile))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(":", 3);
                if (parts.length < 2) {
                    continue; // Skip malformed lines
                }
                String type = parts[0];
                if ("player".equals(type)) {
                    String playerName = parts[1];
                    String permission = parts[2];
                    addPermission(playerName, permission);
                } else if ("op".equals(type)) {
                    String permission = parts[1];
                    opPermissions.add(permission);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void addPermission(String playerName, String permission) {
        playerPermissions.computeIfAbsent(playerName, k -> new HashSet<>()).add(permission);
        savePermissions();
    }

    public void removePermission(String playerName, String permission) {
        Set<String> permissions = playerPermissions.get(playerName);
        if (permissions != null) {
            permissions.remove(permission);
        }
        savePermissions();
    }


    public void registerPermissionCommands() {
        API.getInstance().registerCommand("addperm", this::addPermissionCommand, "perm.mgr");
        API.getInstance().registerCommand("removeperm", this::removePermissionCommand, "perm.mgr");
        API.getInstance().registerCommand("checkperm", this::checkPermissionCommand, "perm.mgr");
        API.getInstance().registerCommand("listperms", this::listPermissionsCommand, "perm.mgr");
    }

    private void addPermissionCommand(CommandSender sender, String[] args) {
        if (args.length != 2) {
            sender.sendMessage("Usage: /addperm <player> <permission>");
            return;
        }
        String playerName = args[0];
        String permission = args[1];
        addPermission(playerName, permission);
        sender.sendMessage("Added permission '" + permission + "' to player " + playerName);
    }

    private void removePermissionCommand(CommandSender sender, String[] args) {
        if (args.length != 2) {
            sender.sendMessage("Usage: /removeperm <player> <permission>");
            return;
        }
        String playerName = args[0];
        String permission = args[1];
        removePermission(playerName, permission);
        sender.sendMessage("Removed permission '" + permission + "' from player " + playerName);
    }

    private void checkPermissionCommand(CommandSender sender, String[] args) {
        if (args.length != 2) {
            sender.sendMessage("Usage: /checkperm <player> <permission>");
            return;
        }
        String playerName = args[0];
        String permission = args[1];
        boolean hasPermission = hasPermission(playerName, permission);
        sender.sendMessage("Player " + playerName + (hasPermission ? " has " : " does not have ") + "permission '" + permission + "'");
    }

    private void listPermissionsCommand(CommandSender sender, String[] args) {
        if (args.length != 1) {
            sender.sendMessage("Usage: /listperms <player>");
            return;
        }
        String playerName = args[0];
        Set<String> permissions = playerPermissions.get(playerName);
        if (permissions == null || permissions.isEmpty()) {
            sender.sendMessage("Player " + playerName + " has no specific permissions.");
        } else {
            sender.sendMessage("Permissions for " + playerName + ":");
            for (String perm : permissions) {
                sender.sendMessage("- " + perm);
            }
        }
    }

    public boolean hasPermission(String playerName, String permission) {
        if (API.getInstance().isPlayerOp(playerName)) {
            return true; // Ops have all permissions
        }
        if (permission == "*")
        {
            return true;
        }
        Set<String> permissions = playerPermissions.get(playerName);
        return permissions != null && (permissions.contains(permission) || permissions.contains("*"));
    }

    public boolean isOp(String playerName) {
        return API.getInstance().isPlayerOp(playerName);
    }

    public boolean hasPermission(CommandSender sender, String permission) {
        if (sender instanceof ConsoleSender) {
            return true; // Console always has all permissions
        } else if (sender instanceof Player) {
            Player player = (Player) sender;
            return hasPermission(player.getName(), permission);
        }
        return false;
    }


    public void addOpPermission(String permission) {
        opPermissions.add(permission);
        savePermissions();
    }

    public void removeOpPermission(String permission) {
        opPermissions.remove(permission);
        savePermissions();
    }

    public boolean isOpPermission(String permission) {
        return opPermissions.contains(permission) || opPermissions.contains("*");
    }
}