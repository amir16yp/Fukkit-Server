package com.fukkit;

import java.util.PriorityQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class Scheduler {
    private final PriorityQueue<ScheduledTask> taskQueue;
    private final AtomicInteger taskIdCounter;

    public Scheduler() {
        this.taskQueue = new PriorityQueue<>();
        this.taskIdCounter = new AtomicInteger(1);
    }

    public int scheduleSyncDelayedTask(JavaPlugin plugin, Runnable task, long delay) {
        int taskId = taskIdCounter.getAndIncrement();
        long executionTime = System.currentTimeMillis() + delay * 50; // Convert ticks to milliseconds
        ScheduledTask scheduledTask = new ScheduledTask(taskId, plugin, task, executionTime, 0);
        taskQueue.offer(scheduledTask);
        return taskId;
    }

    public int scheduleSyncRepeatingTask(JavaPlugin plugin, Runnable task, long delay, long period) {
        int taskId = taskIdCounter.getAndIncrement();
        long executionTime = System.currentTimeMillis() + delay * 50; // Convert ticks to milliseconds
        ScheduledTask scheduledTask = new ScheduledTask(taskId, plugin, task, executionTime, period * 50);
        taskQueue.offer(scheduledTask);
        return taskId;
    }

    public boolean isTaskScheduled(int taskId) {
        return taskQueue.stream().anyMatch(task -> task.getTaskId() == taskId);
    }

    public void cancelTask(int taskId) {
        taskQueue.removeIf(task -> task.getTaskId() == taskId);
    }

    public void cancelTasks(JavaPlugin plugin) {
        taskQueue.removeIf(task -> task.getPlugin() == plugin);
    }

    public void runTasks() {
        long currentTime = System.currentTimeMillis();
        while (!taskQueue.isEmpty() && taskQueue.peek().getNextExecutionTime() <= currentTime) {
            ScheduledTask task = taskQueue.poll();
            task.run();
            if (task.isPeriodic()) {
                task.updateNextExecutionTime();
                taskQueue.offer(task);
            }
        }
    }

    private static class ScheduledTask implements Comparable<ScheduledTask> {
        private final int taskId;
        private final JavaPlugin plugin;
        private final Runnable task;
        private long nextExecutionTime;
        private final long period;

        public ScheduledTask(int taskId, JavaPlugin plugin, Runnable task, long nextExecutionTime, long period) {
            this.taskId = taskId;
            this.plugin = plugin;
            this.task = task;
            this.nextExecutionTime = nextExecutionTime;
            this.period = period;
        }

        public void run() {
            task.run();
        }

        public boolean isPeriodic() {
            return period > 0;
        }

        public void updateNextExecutionTime() {
            nextExecutionTime += period;
        }

        public int getTaskId() {
            return taskId;
        }

        public JavaPlugin getPlugin() {
            return plugin;
        }

        public long getNextExecutionTime() {
            return nextExecutionTime;
        }

        @Override
        public int compareTo(ScheduledTask other) {
            return Long.compare(this.nextExecutionTime, other.nextExecutionTime);
        }
    }
}