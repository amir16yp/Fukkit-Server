--- a/src/com/mojang/minecraft/server/NetworkManager.java
+++ b/src/com/mojang/minecraft/server/NetworkManager.java
@@ -1,17 +1,24 @@
 package com.mojang.minecraft.server;
 
+import com.fukkit.API;
+import com.fukkit.Location;
+import com.fukkit.Player;
+import com.fukkit.cpe.CPENegotiation;
+import com.fukkit.event.EventSystem;
+import com.fukkit.event.EventSystem.BlockPlaceEvent;
 import com.mojang.minecraft.AvailableBlockType;
 import com.mojang.minecraft.level.Level;
 import com.mojang.minecraft.level.tile.Block;
 import com.mojang.minecraft.net.PacketType;
-import com.mojang.minecraft.server.LevelSaver;
-import com.mojang.minecraft.server.MinecraftServer;
 import com.mojang.net.NetworkHandler;
 import com.mojang.util.MathHelper;
+
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.logging.Logger;
 
 public final class NetworkManager {
@@ -37,7 +44,11 @@
    private int t = 0;
    private volatile byte[] bytes = null;
    public boolean i = false;
-
+   private CPENegotiation cpeNegotiation = new CPENegotiation();
+   public boolean cpeSupported;
+   public boolean cpeNegotiationComplete;
+   private boolean supportsLongerMessages;
+    private Map<Integer, StringBuilder> partialMessages = new HashMap<>();
 
    public NetworkManager(MinecraftServer var1, NetworkHandler var2, int var3) {
       this.server = var1;
@@ -49,135 +60,234 @@
       this.xSpawn = (var4.xSpawn << 5) + 16;
       this.ySpawn = (var4.ySpawn << 5) + 16;
       this.zSpawn = (var4.zSpawn << 5) + 16;
-      this.yawSpawn = (int)(var4.rotSpawn * 256.0F / 360.0F);
+      this.yawSpawn = (int) (var4.rotSpawn * 256.0F / 360.0F);
       this.pitchSpawn = 0;
    }
 
    public final String toString() {
       NetworkHandler var1;
-      return !this.l?(var1 = this.networkHandler).address:this.playerName + " (" + (var1 = this.networkHandler).address + ")";
+      return !this.l ? (var1 = this.networkHandler).address
+            : this.playerName + " (" + (var1 = this.networkHandler).address + ")";
    }
 
-   public final void a(PacketType var1, Object[] var2) {
-      if(!this.kicked) {
-         if(var1 != PacketType.INDENTIFICATION) {
-            if(var1 != PacketType.PING) {
-               if(this.l && this.m) {
-                  if(var1 == PacketType.PLAYER_SET_BLOCK) {
-                     if(this.p.size() > 1200) {
-                        this.d("Too much lag");
-                     } else {
-                        this.p.add(var2);
-                     }
-                  } else if(var1 == PacketType.CHAT_MESSAGE) {
-                     String var7;
-                     if((var7 = var2[1].toString().trim()).length() > 0) {
-                        this.c(var7);
-                     }
+   public final void handlePacket(PacketType var1, Object[] var2) {
+      if (this.kicked) {
+          logger.warning("Received packet from kicked player: " + this);
+          return;
+      }
+      logger.info("Handling packet: " + var1.toString());
 
-                  } else {
-                     if(var1 == PacketType.POSITION_ROTATION) {
-                        if(this.p.size() > 1200) {
-                           this.d("Too much lag");
-                           return;
-                        }
+      try {
+          if (var1 == PacketType.INDENTIFICATION) {
+              handleIdentificationPacket(var2);
+          } else if (!this.cpeNegotiationComplete && this.cpeSupported){
+            handleCPEPacket(var1, var2);
+          }
+         else {
+            handleRegularPacket(var1, var2);
+         }
+         
+      } catch (Exception e) {
+          logger.severe("Error handling packet " + var1 + ": " + e.getMessage());
+          e.printStackTrace();
+          this.kickPlayer("Internal server error");
+      }
+  }
 
-                        this.p.add(var2);
-                     }
 
-                  }
-               }
-            }
-         } else {
-            byte var6 = ((Byte)var2[0]).byteValue();
-            String var3 = ((String)var2[1]).trim();
-            String var8 = (String)var2[2];
-            char[] var4 = var3.toCharArray();
-
-            for(int var5 = 0; var5 < var4.length; ++var5) {
-               if(var4[var5] < 32 || var4[var5] > 127) {
-                  this.d("Bad name!");
-                  return;
-               }
-            }
+   private void handleIdentificationPacket(Object[] var2) {
+      byte protocolVersion = ((Byte) var2[0]).byteValue();
+      String username = ((String) var2[1]).trim();
+      String verificationKey = (String) var2[2];
+      byte paddingByte = ((Byte) var2[3]).byteValue();
+
+      this.cpeSupported = cpeNegotiation.isCPEClient(paddingByte);
+      logger.info(
+            this + " CPE support: " + (cpeSupported ? "Yes (padding byte: 0x" + String.format("%02X", paddingByte) + ")"
+                  : "No (padding byte: 0x" + String.format("%02X", paddingByte) + ")"));
+      if (username.length() < 2 || username.length() > 16) {
+         this.kickPlayer("Illegal name.");
+         return;
+      }
 
-            if(var3.length() < 2 || var3.length() > 16) {
-               this.a("Illegal name.");
-            }
+      if (this.server.verifyNames && !verificationKey.equals(this.server.saltGenerator.generate(username))) {
+         this.kickPlayer("Name wasn't verified by classicube.net!");
+         return;
+      }
 
-            if(this.server.verifyNames && !var8.equals(this.server.saltGenerator.generate(var3))) {
-               this.a("The name wasn\'t verified by minecraft.net!");
-            } else if(var6 != 7) {
-               this.a("Wrong protocol version.");
-            } else if(this.server.playerManager2.containsPlayer(var3)) {
-               this.a("You\'re banned!");
-            } else if(this.server.adminSlot && !this.server.playerManager1.containsPlayer(var3) && this.server.a() < 1) {
-               this.networkHandler.send(PacketType.DISCONNECT, new Object[]{"The server is full!"});
-               logger.info(var3 + " connected, but got kicked because the server was almost full and there are reserved admin slots.");
-               this.server.a(this);
-               this.kicked = true;
-            } else {
-               NetworkManager var11;
-               if((var11 = this.server.c(var3)) != null) {
-                  var11.a("You logged in from another computer.");
-               }
+      if (protocolVersion != 7) {
+         this.kickPlayer("Wrong protocol version.");
+         return;
+      }
 
-               logger.info(this + " logged in as " + var3);
-               this.l = true;
-               this.playerName = var3;
-               this.networkHandler.send(PacketType.INDENTIFICATION, new Object[]{Byte.valueOf((byte)7), this.server.serverName, this.server.MOTD, Integer.valueOf(this.server.playerManager1.containsPlayer(var3)?100:0)});
-               Level var9 = this.server.mainLevel;
-               byte[] var10 = var9.copyBlocks();
-               (new LevelSaver(this, var10)).start();
-               this.server.playerManager4.addPlayer(var3);
-            }
-         }
+      if (this.server.playerManager2.containsPlayer(username)) {
+         this.kickPlayer("You're banned!");
+         return;
+      }
+
+      if (this.server.adminSlot && !this.server.playerManager1.containsPlayer(username)
+            && this.server.getAvailableSlots() < 1) {
+         this.kickPlayer("The server is full!");
+         return;
+      }
+
+      NetworkManager existingPlayer = this.server.c(username);
+      if (existingPlayer != null) {
+         existingPlayer.kickPlayer("You logged in from another computer.");
       }
-   }
 
-   private void c(String var1) {
-      var1 = var1.trim();
-      this.timeTillTalk += var1.length() + 15 << 2;
-      if(this.timeTillTalk > 600) {
-         this.timeTillTalk = 760;
-         this.b(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), "Too much chatter! Muted for eight seconds."});
-         logger.info("Muting " + this.playerName + " for chatting too much");
+
+      logger.info(this + " logged in as " + username);
+      this.l = true;
+      this.playerName = username;
+
+      if (this.cpeSupported) {
+          cpeNegotiation.negotiateAsServer(this.networkHandler);
       } else {
-         char[] var2 = var1.toCharArray();
+          this.cpeNegotiationComplete = true;
+          this.sendWelcomePackets();
+      }
+  }
 
-         for(int var3 = 0; var3 < var2.length; ++var3) {
-            if(var2[var3] < 32 || var2[var3] > 127) {
-               this.d("Bad chat message!");
-               return;
-            }
+
+   private void handleCPEPacket(PacketType var1, Object[] var2) {
+      if (this.cpeSupported && !this.cpeNegotiationComplete) {
+         cpeNegotiation.handleClientPacket(var1, var2);
+         if (cpeNegotiation.isNegotiationComplete()) {
+            this.cpeNegotiationComplete = true;
+            logger.info("CPE negotiation completed for " + this);
+            this.sendWelcomePackets();
          }
+      } else {
+         logger.warning("Received unexpected CPE packet: " + var1.toString());
+      }
+   }
 
-         if(var1.startsWith("/")) {
-            if(this.server.playerManager1.containsPlayer(this.playerName)) {
-               this.server.a(this, var1.substring(1));
-            } else {
-               this.b(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), "You\'re not a server admin!"});
-            }
+  public void sendLongMessage(String message) {
+   if (supportsLongerMessages) {
+       int maxLength = 64;  // Assume 64 is the max length for a single packet
+       for (int i = 0; i < message.length(); i += maxLength) {
+           int end = Math.min(i + maxLength, message.length());
+           String part = message.substring(i, end);
+           byte messageType = (end < message.length()) ? (byte) 1 : (byte) 0;
+           this.networkHandler.send(PacketType.CHAT_MESSAGE, new Object[]{messageType, part});
+       }
+   } else {
+       // If LongerMessages is not supported, send as a regular message
+       // You might want to truncate or split the message here
+       this.networkHandler.send(PacketType.CHAT_MESSAGE, new Object[]{(byte) 0, message});
+   }
+}
+
+  private void activateMutuallySupported() {
+   for (CPENegotiation.Extension ext : cpeNegotiation.getMutuallySupported()) {
+       logger.info("Activating extension: " + ext);
+       // Activate the extension here
+       // This might involve setting flags or initializing certain features
+   }
+}
+
+   private void handleRegularPacket(PacketType var1, Object[] var2) {
+      if (var1 == PacketType.PING) {
+         // Handle ping packet
+      } else if (var1 == PacketType.PLAYER_SET_BLOCK) {
+         if (this.p.size() > 1200) {
+            this.d("Too much lag");
          } else {
-            logger.info(this.playerName + " says: " + var1);
-            this.server.a(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(this.playerID), this.playerName + ": " + var1});
+            this.p.add(var2);
          }
+      } else if (var1 == PacketType.CHAT_MESSAGE) {
+         //String message = var2[1].toString().trim();
+         //if (message.length() > 0) {
+         //  this.handleChatMessage(message);
+         //}
+         handleChatMessage(var2);
+      } else if (var1 == PacketType.POSITION_ROTATION) {
+         if (this.p.size() > 1200) {
+            this.d("Too much lag");
+         } else {
+            this.p.add(var2);
+         }
+      } else {
+         logger.warning("Unknown packet type, attempting as CPE packet type: " + var1);
+         handleCPEPacket(var1, var2);
       }
    }
 
-   public final void a(String var1) {
-      this.networkHandler.send(PacketType.DISCONNECT, new Object[]{var1});
-      logger.info("Kicking " + this + ": " + var1);
-      this.server.a(this);
+   private void sendWelcomePackets() {
+      logger.info("Sending welcome packets to " + this);
+      
+      this.networkHandler.send(PacketType.INDENTIFICATION,
+          new Object[] { Byte.valueOf((byte) 7), this.server.serverName, this.server.MOTD,
+              Integer.valueOf(this.server.playerManager1.containsPlayer(this.playerName) ? 100 : 0) });
+      
+      Level level = this.server.mainLevel;
+      byte[] levelData = level.copyBlocks();
+      (new LevelSaver(this, levelData)).start();
+      this.server.playerManager4.addPlayer(this.playerName);
+
+      EventSystem.PlayerJoinEvent joinEvent = new EventSystem.PlayerJoinEvent(new Player(this));
+      EventSystem.callEvent(joinEvent);
+
+      this.l = true;
+      this.m = true; // Set this to true to indicate the player is fully initialized
+
+      logger.info("Welcome packets sent to " + this);
+  }
+
+  private void handleChatMessage(Object[] var2) {
+   int playerID = ((Byte) var2[0]).intValue();
+   String message = (String) var2[1];
+
+   if (supportsLongerMessages) {
+       if (playerID == 0) {
+           // This is a complete message or the last part of a partial message
+           if (partialMessages.containsKey(this.playerID)) {
+               // This is the last part of a partial message
+               StringBuilder fullMessage = partialMessages.get(this.playerID);
+               fullMessage.append(message);  // Strip trailing whitespace from the last part
+               processCompleteMessage(fullMessage.toString());
+               partialMessages.remove(this.playerID);
+           } else {
+               // This is a complete message
+               processCompleteMessage(message);
+           }
+       } else {
+           // This is a part of a partial message
+           StringBuilder partialMessage = partialMessages.computeIfAbsent(this.playerID, k -> new StringBuilder());
+           partialMessage.append(message);  // Preserve all whitespace for partial messages
+       }
+   } else {
+       // Handle regular messages as before
+       processCompleteMessage(message);
+   }
+}
+
+private void processCompleteMessage(String message) {
+   // Process the complete message here
+   // This could involve broadcasting it to other players, logging it, etc.
+   logger.info(this.playerName + " says: " + message);
+
+   EventSystem.PlayerChatEvent chatEvent = new EventSystem.PlayerChatEvent(new Player(this), message);
+   EventSystem.callEvent(chatEvent);
+
+   if (!chatEvent.isCancelled()) {
+       this.server.broadcastPacket(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(this.playerID), this.playerName + ": " + chatEvent.getMessage()});
+   }
+}
+   public final void kickPlayer(String reason) {
+      this.networkHandler.send(PacketType.DISCONNECT, new Object[] { reason });
+      logger.info("Kicking " + this + ": " + reason);
+      this.server.schedulePlayerDisconnect(this);
       this.kicked = true;
    }
 
    private void d(String var1) {
-      this.a("Cheat detected: " + var1);
+      this.kickPlayer("Cheat detected: " + var1);
    }
 
    public final void b(String var1) {
-      this.b(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var1});
+      this.b(PacketType.CHAT_MESSAGE, new Object[] { Integer.valueOf(-1), var1 });
    }
 
    public final void a(byte[] var1) {
@@ -185,22 +295,22 @@
    }
 
    public final void a() {
-      if(this.clicks >= 2) {
+      if (this.clicks >= 2) {
          this.clicks -= 2;
       }
 
-      if(this.timeTillTalk > 0) {
+      if (this.timeTillTalk > 0) {
          --this.timeTillTalk;
-         if(this.timeTillTalk == 600) {
-            this.b(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), "You can now talk again."});
+         if (this.timeTillTalk == 600) {
+            this.b(PacketType.CHAT_MESSAGE, new Object[] { Integer.valueOf(-1), "You can now talk again." });
             this.timeTillTalk = 300;
          }
       }
 
       Object[] var2;
       boolean var10000;
-      if(this.p.size() > 0) {
-         for(boolean var1 = true; this.p.size() > 0 && var1; var1 = var10000) {
+      if (this.p.size() > 0) {
+         for (boolean var1 = true; this.p.size() > 0 && var1; var1 = var10000) {
             byte var3;
             byte var4;
             short var5;
@@ -210,110 +320,171 @@
             short var10002;
             short var10003;
             byte var10004;
-            if((var2 = (Object[])this.p.remove(0))[0] instanceof Short) {
-               var10001 = ((Short)var2[0]).shortValue();
-               var10002 = ((Short)var2[1]).shortValue();
-               var10003 = ((Short)var2[2]).shortValue();
-               var10004 = ((Byte)var2[3]).byteValue();
-               var3 = ((Byte)var2[4]).byteValue();
+            if ((var2 = (Object[]) this.p.remove(0))[0] instanceof Short) {
+               var10001 = ((Short) var2[0]).shortValue();
+               var10002 = ((Short) var2[1]).shortValue();
+               var10003 = ((Short) var2[2]).shortValue();
+               var10004 = ((Byte) var2[3]).byteValue();
+               var3 = ((Byte) var2[4]).byteValue();
                var4 = var10004;
                var5 = var10003;
                var6 = var10002;
                var13 = var10001;
                ++this.clicks;
-               if(this.clicks == 100) {
+               if (this.clicks == 100) {
                   this.d("Too much clicking!");
                } else {
                   Level var7 = this.server.mainLevel;
-                  float var8 = (float)var13 - (float)this.xSpawn / 32.0F;
-                  float var9 = (float)var6 - ((float)this.ySpawn / 32.0F - 1.62F);
-                  float var10 = (float)var5 - (float)this.zSpawn / 32.0F;
+                  float var8 = (float) var13 - (float) this.xSpawn / 32.0F;
+                  float var9 = (float) var6 - ((float) this.ySpawn / 32.0F - 1.62F);
+                  float var10 = (float) var5 - (float) this.zSpawn / 32.0F;
                   var8 = var8 * var8 + var9 * var9 + var10 * var10;
                   var9 = 8.0F;
-                  if(var8 >= var9 * var9) {
+                  Player player = new Player(this);
+                  if (!AvailableBlockType.blocks.contains(Block.blocks[var3])) {
+                     if (!API.getInstance().getPermissionManager().hasPermission(player, "unlawful.blocks")) {
+                        this.d("Tile type");
+                     }
+                  }
+                  if (var8 >= var9 * var9) {
                      System.out.println("Distance: " + MathHelper.sqrt(var8));
                      this.d("Distance");
-                  } else if(!AvailableBlockType.blocks.contains(Block.blocks[var3])) {
-                     this.d("Tile type");
-                  } else if(var13 >= 0 && var6 >= 0 && var5 >= 0 && var13 < var7.width && var6 < var7.depth && var5 < var7.height) {
-                     if(var4 == 0) {
-                        if(var7.getTile(var13, var6, var5) != Block.BEDROCK.id || this.server.playerManager1.containsPlayer(this.playerName)) {
+                  } else if (var13 >= 0 && var6 >= 0 && var5 >= 0 && var13 < var7.width && var6 < var7.depth
+                        && var5 < var7.height) {
+                     if (var4 == 0) {
+                        if (var7.getTile(var13, var6, var5) != Block.BEDROCK.id
+                              || this.server.playerManager1.containsPlayer(this.playerName)) {
+
                            var7.setTile(var13, var6, var5, 0);
                         }
-                     } else {
-                        Block var16;
-                        if((var16 = Block.blocks[var7.getTile(var13, var6, var5)]) == null || var16 == Block.WATER || var16 == Block.STATIONARY_WATER || var16 == Block.LAVA || var16 == Block.STATIONARY_LAVA) {
-                           if(this.i && var3 == Block.STONE.id) {
-                              var7.setTile(var13, var6, var5, Block.BEDROCK.id);
-                           } else {
-                              var7.setTile(var13, var6, var5, var3);
-                           }
+                     } else { // Block placement
+                        Location placeLocation = Location.fromTileCoordinates(var13, var6, var5);
+                        Block existingBlock = Block.blocks[var7.getTile(var13, var6, var5)];
+                        Block newBlock = Block.blocks[var3];
+                        // Check if the block can be placed
+                        if (existingBlock == null || existingBlock == Block.WATER
+                              || existingBlock == Block.STATIONARY_WATER
+                              || existingBlock == Block.LAVA || existingBlock == Block.STATIONARY_LAVA) {
+
+                           // Create and call the BlockPlaceEvent
+                           BlockPlaceEvent placeEvent = new BlockPlaceEvent(new Player(this), placeLocation, newBlock,
+                                 existingBlock);
+                           EventSystem.callEvent(placeEvent);
+
+                           // Check if the event was cancelled
+                           if (!placeEvent.isCancelled()) {
+                              // Special case for admins placing bedrock
+                              newBlock = placeEvent.getBlock();
+                              if (this.i && var3 == Block.STONE.id) {
+                                 var7.setTile(var13, var6, var5, Block.BEDROCK.id);
+                                 newBlock = Block.BEDROCK;
+                              } else {
+                                 var7.setTile(var13, var6, var5, newBlock.id);
+                              }
+
+                              // Call onPlace method of the placed block
+                              newBlock.onPlace(var7, var13, var6, var5);
 
-                           Block.blocks[var3].onPlace(var7, var13, var6, var5);
+                              // You might want to notify nearby clients about the block change
+                           }
+                           this.server.updateBlock(var13, var6, var5);
                         }
                      }
                   }
                }
-
                var10000 = true;
             } else {
-               ((Byte)var2[0]).byteValue();
-               var10001 = ((Short)var2[1]).shortValue();
-               var10002 = ((Short)var2[2]).shortValue();
-               var10003 = ((Short)var2[3]).shortValue();
-               var10004 = ((Byte)var2[4]).byteValue();
-               var3 = ((Byte)var2[5]).byteValue();
+               ((Byte) var2[0]).byteValue();
+               var10001 = ((Short) var2[1]).shortValue();
+               var10002 = ((Short) var2[2]).shortValue();
+               var10003 = ((Short) var2[3]).shortValue();
+               var10004 = ((Byte) var2[4]).byteValue();
+               var3 = ((Byte) var2[5]).byteValue();
                var4 = var10004;
                var5 = var10003;
                var6 = var10002;
                var13 = var10001;
-               if(var13 == this.xSpawn && var6 == this.ySpawn && var5 == this.zSpawn && var4 == this.yawSpawn && var3 == this.pitchSpawn) {
-                  var10000 = true;
-               } else {
-                  boolean var21 = var13 == this.xSpawn && var6 == this.ySpawn && var5 == this.zSpawn;
-                  if(this.t++ % 2 == 0) {
-                     int var22 = var13 - this.xSpawn;
-                     int var23 = var6 - this.ySpawn;
-                     int var24 = var5 - this.zSpawn;
-                     if(var22 >= 128 || var22 < -128 || var23 >= 128 || var23 < -128 || var24 >= 128 || var24 < -128 || this.t % 20 <= 1) {
-                        this.xSpawn = var13;
-                        this.ySpawn = var6;
-                        this.zSpawn = var5;
-                        this.yawSpawn = var4;
-                        this.pitchSpawn = var3;
-                        this.server.a(this, PacketType.POSITION_ROTATION, new Object[]{Integer.valueOf(this.playerID), Short.valueOf(var13), Short.valueOf(var6), Short.valueOf(var5), Byte.valueOf(var4), Byte.valueOf(var3)});
-                        var10000 = false;
-                        continue;
-                     }
 
-                     if(var13 == this.xSpawn && var6 == this.ySpawn && var5 == this.zSpawn) {
-                        this.yawSpawn = var4;
-                        this.pitchSpawn = var3;
-                        this.server.a(this, PacketType.ROTATION_UPDATE, new Object[]{Integer.valueOf(this.playerID), Byte.valueOf(var4), Byte.valueOf(var3)});
-                     } else if(var4 == this.yawSpawn && var3 == this.pitchSpawn) {
-                        this.xSpawn = var13;
-                        this.ySpawn = var6;
-                        this.zSpawn = var5;
-                        this.server.a(this, PacketType.POSITION_UPDATE, new Object[]{Integer.valueOf(this.playerID), Integer.valueOf(var22), Integer.valueOf(var23), Integer.valueOf(var24)});
-                     } else {
-                        this.xSpawn = var13;
-                        this.ySpawn = var6;
-                        this.zSpawn = var5;
-                        this.yawSpawn = var4;
-                        this.pitchSpawn = var3;
-                        this.server.a(this, PacketType.POSITION_ROTATION_UPDATE, new Object[]{Integer.valueOf(this.playerID), Integer.valueOf(var22), Integer.valueOf(var23), Integer.valueOf(var24), Byte.valueOf(var4), Byte.valueOf(var3)});
-                     }
+               if (var13 != this.xSpawn || var6 != this.ySpawn || var5 != this.zSpawn || var4 != this.yawSpawn
+                     || var3 != this.pitchSpawn) {
+                  // Fire PlayerMoveEvent
+                  EventSystem.PlayerMoveEvent moveEvent = new EventSystem.PlayerMoveEvent(
+                        new Player(this),
+                        (short) this.xSpawn, (short) this.ySpawn, (short) this.zSpawn, (byte) this.yawSpawn,
+                        (byte) this.pitchSpawn,
+                        var13, var6, var5, var4, var3);
+                  if ((int) var13 != (int) this.xSpawn || (int) var6 != (int) this.ySpawn
+                        || (int) var5 != (int) this.zSpawn) {
+                     moveEvent.newStep = true;
                   }
+                  EventSystem.callEvent(moveEvent);
 
-                  var10000 = var21;
+                  // Check if the event was cancelled or the position was modified
+                  if (!moveEvent.isCancelled()) {
+                     var13 = moveEvent.getNewX();
+                     var6 = moveEvent.getNewY();
+                     var5 = moveEvent.getNewZ();
+                     var4 = moveEvent.getNewYaw();
+                     var3 = moveEvent.getNewPitch();
+
+                     boolean var21 = var13 == this.xSpawn && var6 == this.ySpawn && var5 == this.zSpawn;
+                     if (this.t++ % 2 == 0) {
+                        int var22 = var13 - this.xSpawn;
+                        int var23 = var6 - this.ySpawn;
+                        int var24 = var5 - this.zSpawn;
+                        if (var22 >= 128 || var22 < -128 || var23 >= 128 || var23 < -128 || var24 >= 128 || var24 < -128
+                              || this.t % 20 <= 1) {
+                           this.xSpawn = var13;
+                           this.ySpawn = var6;
+                           this.zSpawn = var5;
+                           this.yawSpawn = var4;
+                           this.pitchSpawn = var3;
+                           this.server.broadcastPacketExcept(this, PacketType.POSITION_ROTATION,
+                                 new Object[] { Integer.valueOf(this.playerID), Short.valueOf(var13),
+                                       Short.valueOf(var6), Short.valueOf(var5), Byte.valueOf(var4),
+                                       Byte.valueOf(var3) });
+                           var10000 = false;
+                           continue;
+                        }
+
+                        if (var13 == this.xSpawn && var6 == this.ySpawn && var5 == this.zSpawn) {
+                           this.yawSpawn = var4;
+                           this.pitchSpawn = var3;
+                           this.server.broadcastPacketExcept(this, PacketType.ROTATION_UPDATE, new Object[] {
+                                 Integer.valueOf(this.playerID), Byte.valueOf(var4), Byte.valueOf(var3) });
+                        } else if (var4 == this.yawSpawn && var3 == this.pitchSpawn) {
+                           this.xSpawn = var13;
+                           this.ySpawn = var6;
+                           this.zSpawn = var5;
+                           this.server.broadcastPacketExcept(this, PacketType.POSITION_UPDATE,
+                                 new Object[] { Integer.valueOf(this.playerID), Integer.valueOf(var22),
+                                       Integer.valueOf(var23), Integer.valueOf(var24) });
+                        } else {
+                           this.xSpawn = var13;
+                           this.ySpawn = var6;
+                           this.zSpawn = var5;
+                           this.yawSpawn = var4;
+                           this.pitchSpawn = var3;
+                           this.server.broadcastPacketExcept(this, PacketType.POSITION_ROTATION_UPDATE,
+                                 new Object[] { Integer.valueOf(this.playerID), Integer.valueOf(var22),
+                                       Integer.valueOf(var23), Integer.valueOf(var24), Byte.valueOf(var4),
+                                       Byte.valueOf(var3) });
+                        }
+                     }
+                     var10000 = var21;
+                  } else {
+                     var10000 = true;
+                  }
+               } else {
+                  var10000 = true;
                }
             }
          }
       }
 
-      if(!this.l && System.currentTimeMillis() - this.time > 5000L) {
-         this.a("You need to log in!");
-      } else if(this.bytes != null) {
+      if (!this.l && System.currentTimeMillis() - this.time > 5000L) {
+         this.kickPlayer("You need to log in!");
+      } else if (this.bytes != null) {
          Level var11 = this.server.mainLevel;
          byte[] var15 = new byte[1024];
          int var20 = 0;
@@ -321,37 +492,50 @@
          this.networkHandler.send(PacketType.LEVEL_INITIALIZE, new Object[0]);
 
          int var17;
-         while(var18 > 0) {
+         while (var18 > 0) {
             var17 = var18;
-            if(var18 > var15.length) {
+            if (var18 > var15.length) {
                var17 = var15.length;
             }
 
             System.arraycopy(this.bytes, var20, var15, 0, var17);
-            this.networkHandler.send(PacketType.LEVEL_DATA_CHUNK, new Object[]{Integer.valueOf(var17), var15, Integer.valueOf((var20 + var17) * 100 / this.bytes.length)});
+            this.networkHandler.send(PacketType.LEVEL_DATA_CHUNK, new Object[] { Integer.valueOf(var17), var15,
+                  Integer.valueOf((var20 + var17) * 100 / this.bytes.length) });
             var18 -= var17;
             var20 += var17;
          }
 
-         this.networkHandler.send(PacketType.LEVEL_FINALIZE, new Object[]{Integer.valueOf(var11.width), Integer.valueOf(var11.depth), Integer.valueOf(var11.height)});
-         this.networkHandler.send(PacketType.SPAWN_PLAYER, new Object[]{Integer.valueOf(-1), this.playerName, Integer.valueOf(this.xSpawn), Integer.valueOf(this.ySpawn), Integer.valueOf(this.zSpawn), Integer.valueOf(this.yawSpawn), Integer.valueOf(this.pitchSpawn)});
-         this.server.a(this, PacketType.SPAWN_PLAYER, new Object[]{Integer.valueOf(this.playerID), this.playerName, Integer.valueOf((var11.xSpawn << 5) + 16), Integer.valueOf((var11.ySpawn << 5) + 16), Integer.valueOf((var11.zSpawn << 5) + 16), Integer.valueOf((int)(var11.rotSpawn * 256.0F / 360.0F)), Integer.valueOf(0)});
-         this.server.a(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), this.playerName + " joined the game"});
+         this.networkHandler.send(PacketType.LEVEL_FINALIZE, new Object[] { Integer.valueOf(var11.width),
+               Integer.valueOf(var11.depth), Integer.valueOf(var11.height) });
+         this.networkHandler.send(PacketType.SPAWN_PLAYER,
+               new Object[] { Integer.valueOf(-1), this.playerName, Integer.valueOf(this.xSpawn),
+                     Integer.valueOf(this.ySpawn), Integer.valueOf(this.zSpawn), Integer.valueOf(this.yawSpawn),
+                     Integer.valueOf(this.pitchSpawn) });
+         this.server.broadcastPacketExcept(this, PacketType.SPAWN_PLAYER,
+               new Object[] { Integer.valueOf(this.playerID), this.playerName,
+                     Integer.valueOf((var11.xSpawn << 5) + 16), Integer.valueOf((var11.ySpawn << 5) + 16),
+                     Integer.valueOf((var11.zSpawn << 5) + 16),
+                     Integer.valueOf((int) (var11.rotSpawn * 256.0F / 360.0F)), Integer.valueOf(0) });
+         this.server.broadcastPacket(PacketType.CHAT_MESSAGE,
+               new Object[] { Integer.valueOf(-1), this.playerName + " joined the game" });
          Iterator var19 = this.server.b().iterator();
 
-         while(var19.hasNext()) {
+         while (var19.hasNext()) {
             NetworkManager var12;
-            if((var12 = (NetworkManager)var19.next()) != null && var12 != this && var12.l) {
-               this.networkHandler.send(PacketType.SPAWN_PLAYER, new Object[]{Integer.valueOf(var12.playerID), var12.playerName, Integer.valueOf(var12.xSpawn), Integer.valueOf(var12.ySpawn), Integer.valueOf(var12.zSpawn), Integer.valueOf(var12.yawSpawn), Integer.valueOf(var12.pitchSpawn)});
+            if ((var12 = (NetworkManager) var19.next()) != null && var12 != this && var12.l) {
+               this.networkHandler.send(PacketType.SPAWN_PLAYER,
+                     new Object[] { Integer.valueOf(var12.playerID), var12.playerName, Integer.valueOf(var12.xSpawn),
+                           Integer.valueOf(var12.ySpawn), Integer.valueOf(var12.zSpawn),
+                           Integer.valueOf(var12.yawSpawn), Integer.valueOf(var12.pitchSpawn) });
             }
          }
 
          this.m = true;
          var17 = 0;
 
-         while(var17 < this.n.size()) {
-            PacketType var14 = (PacketType)this.n.get(var17++);
-            var2 = (Object[])((Object[])this.n.get(var17++));
+         while (var17 < this.n.size()) {
+            PacketType var14 = (PacketType) this.n.get(var17++);
+            var2 = (Object[]) ((Object[]) this.n.get(var17++));
             this.b(var14, var2);
          }
 
@@ -360,8 +544,8 @@
       }
    }
 
-   public final void b(PacketType var1, Object ... var2) {
-      if(!this.m) {
+   public final void b(PacketType var1, Object... var2) {
+      if (!this.m) {
          this.n.add(var1);
          this.n.add(var2);
       } else {
@@ -370,16 +554,13 @@
    }
 
    public final void a(Exception var1) {
-      if(var1 instanceof IOException) {
-         logger.info(this + " lost connection suddenly. (" + var1 + ")");
-      } else {
          logger.warning(this + ":" + var1);
          logger.log(java.util.logging.Level.WARNING, "Exception handling " + this + "!", var1);
          var1.printStackTrace();
-      }
 
-      this.server.a(this, PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), this.playerName + " left the game"});
-      MinecraftServer.b(this);
+      this.server.broadcastPacketExcept(this, PacketType.CHAT_MESSAGE,
+            new Object[] { Integer.valueOf(-1), this.playerName + " left the game" });
+      MinecraftServer.disconnectPlayer(this);
    }
 
 }
