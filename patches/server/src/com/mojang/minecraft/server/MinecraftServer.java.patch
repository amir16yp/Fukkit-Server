--- a/src/com/mojang/minecraft/server/MinecraftServer.java
+++ b/src/com/mojang/minecraft/server/MinecraftServer.java
@@ -1,43 +1,28 @@
 package com.mojang.minecraft.server;
 
-import com.mojang.minecraft.level.LevelIO;
-import com.mojang.minecraft.level.generator.LevelGenerator;
+import com.fukkit.API;
+import com.fukkit.Scheduler;
+import com.fukkit.WorldManager;
+import com.fukkit.cpe.Environment;
+import com.fukkit.cpe.WeatherType;
 import com.mojang.minecraft.net.PacketType;
-import com.mojang.minecraft.server.ConsoleInput;
-import com.mojang.minecraft.server.HeartbeatManager;
-import com.mojang.minecraft.server.LogFormatter;
-import com.mojang.minecraft.server.LogHandler;
-import com.mojang.minecraft.server.NetworkManager;
-import com.mojang.minecraft.server.PlayerManager;
-import com.mojang.minecraft.server.SaltGenerator;
-import com.mojang.minecraft.server.UNKNOWN0;
 import com.mojang.net.BindTo;
 import com.mojang.net.NetworkHandler;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.FileReader;
-import java.io.FileWriter;
-import java.io.IOException;
+
+import java.io.*;
+import java.net.SocketException;
 import java.net.URLEncoder;
 import java.nio.channels.SocketChannel;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Random;
+import java.util.*;
 import java.util.logging.ConsoleHandler;
 import java.util.logging.Handler;
-import java.util.logging.Level;
 import java.util.logging.Logger;
 
 public class MinecraftServer implements Runnable {
 
-   static Logger logger = Logger.getLogger("MinecraftServer");
+   static Logger logger = API.getLogger("MinecraftServer");
    static DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
    private BindTo bindTo;
    private Map m = new HashMap();
@@ -51,7 +36,7 @@
    public String MOTD;
    private int port;
    public boolean adminSlot;
-   private NetworkManager[] networkManager;
+   public NetworkManager[] networkManager;
    public PlayerManager playerManager1 = new PlayerManager("Admins", new File("admins.txt"));
    public PlayerManager playerManager2 = new PlayerManager("Banned", new File("banned.txt"));
    private PlayerManager playerManager3 = new PlayerManager("Banned (IP)", new File("banned-ip.txt"));
@@ -63,13 +48,30 @@
    public boolean verifyNames;
    private boolean growTrees;
    private int maxConnections;
+   private Scheduler scheduler;
+   private WorldManager worldManager;
+   public boolean useCWformat;
+   private long seed;
+   private boolean announce;
+
+   public Scheduler getScheduler()
+   {
+      return this.scheduler;
+   }
 
+   public Properties getProperties()
+   {
+      return this.properties;
+   }
 
-   public MinecraftServer() {
+
+   public MinecraftServer() throws SocketException, IOException {
+      logger = API.getLogger("Server");
+      this.scheduler = new Scheduler();
       this.saltGenerator = new SaltGenerator(this.salt);
       this.verifyNames = false;
       this.growTrees = false;
-
+      this.worldManager = new WorldManager(this);
       try {
          this.properties.load(new FileReader("server.properties"));
       } catch (Exception var4) {
@@ -85,14 +87,19 @@
          this.verifyNames = Boolean.parseBoolean(this.properties.getProperty("verify-names", "true"));
          this.growTrees = Boolean.parseBoolean(this.properties.getProperty("grow-trees", "false"));
          this.adminSlot = Boolean.parseBoolean(this.properties.getProperty("admin-slot", "false"));
+         boolean tickFlowers = Boolean.parseBoolean(this.properties.getProperty("tick-flowers", "false"));
+         boolean tickMushrooms = Boolean.parseBoolean(this.properties.getProperty("tick-mushrooms", "false"));
+         boolean allowFlowingBlocks = Boolean.parseBoolean(this.properties.getProperty("allow-flowing", "true"));
+         String texturePack = String.valueOf(this.properties.getProperty("texture-pack", ""));
          if(this.maxPlayers < 1) {
             this.maxPlayers = 1;
          }
-
-         if(this.maxPlayers > 32) {
-            this.maxPlayers = 32;
-         }
-
+         this.announce = Boolean.parseBoolean(this.properties.getProperty("announce", "false"));
+         this.properties.setProperty("announce", String.valueOf(announce));
+         this.seed = Long.parseLong(this.properties.getProperty("seed", String.valueOf(new Random().nextLong())));
+         this.properties.setProperty("seed", String.valueOf(seed));
+         this.useCWformat = Boolean.parseBoolean(this.properties.getProperty("use-cw-format", "true"));
+         this.properties.setProperty("use-cw-format", String.valueOf(useCWformat));
          this.maxConnections = Integer.parseInt(this.properties.getProperty("max-connections", "3"));
          this.properties.setProperty("server-name", this.serverName);
          this.properties.setProperty("motd", this.MOTD);
@@ -103,6 +110,14 @@
          this.properties.setProperty("max-connections", "3");
          this.properties.setProperty("grow-trees", "" + this.growTrees);
          this.properties.setProperty("admin-slot", "" + this.adminSlot);
+         this.properties.setProperty("allow-flowing", String.valueOf(allowFlowingBlocks));
+         this.properties.setProperty("tick-flowers", String.valueOf(tickFlowers));
+         this.properties.setProperty("tick-mushrooms", String.valueOf(tickMushrooms));
+         this.properties.setProperty("texture-pack", texturePack);
+         // Set default world name to "world" if not specified
+         String mainWorldName = this.properties.getProperty("world-name", "world");
+         this.properties.setProperty("world-name", mainWorldName);
+
       } catch (Exception var3) {
          var3.printStackTrace();
          logger.warning("server.properties is broken! Delete it or fix it!");
@@ -125,18 +140,30 @@
          logger.warning("###########################################################");
       }
 
+      if (this.announce)
+      {
+         logger.info("Announce set to true, server will attempt to announce itself to the ClassiCube server list");
+      }
+
       try {
          this.properties.store(new FileWriter("server.properties"), "Minecraft server properties");
       } catch (Exception var2) {
          logger.warning("Failed to save server.properties!");
       }
 
+      String mainWorldName = properties.getProperty("world-name", "world");
+      this.mainLevel = worldManager.loadWorld(mainWorldName);
+      if (this.mainLevel == null) {
+         logger.info("World '" + mainWorldName + "' not found. Generating a new world with seed: " + seed);
+         this.mainLevel = worldManager.createWorld(mainWorldName, seed, "default");
+      }
+
       this.networkManager = new NetworkManager[this.maxPlayers];
       this.bindTo = new BindTo(this.port, this);
-      (new ConsoleInput(this)).start();
+      (new ConsoleInput()).start();
    }
 
-   public final void a(NetworkHandler var1) {
+   public final void handlePlayerDisconnect(NetworkHandler var1) {
       NetworkManager var2;
       if((var2 = (NetworkManager)this.m.get(var1)) != null) {
          this.playerManager4.removePlayer(var2.playerName);
@@ -147,7 +174,7 @@
             this.networkManager[var2.playerID] = null;
          }
 
-         this.a(PacketType.DESPAWN_PLAYER, new Object[]{Integer.valueOf(var2.playerID)});
+         this.broadcastPacket(PacketType.DESPAWN_PLAYER, new Object[]{Integer.valueOf(var2.playerID)});
       }
 
    }
@@ -156,15 +183,15 @@
       this.o.add(new UNKNOWN0(var1, 100));
    }
 
-   public final void a(NetworkManager var1) {
+   public final void schedulePlayerDisconnect(NetworkManager var1) {
       this.o.add(new UNKNOWN0(var1.networkHandler, 100));
    }
 
-   public static void b(NetworkManager var0) {
+   public static void disconnectPlayer(NetworkManager var0) {
       var0.networkHandler.close();
    }
 
-   public final void a(PacketType var1, Object ... var2) {
+   public final void broadcastPacket(PacketType var1, Object ... var2) {
       for(int var3 = 0; var3 < this.n.size(); ++var3) {
          try {
             ((NetworkManager)this.n.get(var3)).b(var1, var2);
@@ -172,10 +199,29 @@
             ((NetworkManager)this.n.get(var3)).a(var5);
          }
       }
+   }
+
+   public final void broadcastPacketToCPEClients(PacketType packetType, Object ... obj)
+   {
+      for(int var3 = 0; var3 < this.n.size(); ++var3) {
+         try {
+            NetworkManager mgr;
+            mgr = (NetworkManager) this.n.get(var3);
+            if (mgr != null)
+            {
+               if (mgr.cpeSupported)
+               {
+                  mgr.b(packetType, obj);
+               }
+            }
 
+         } catch (Exception exception) {
+            logger.warning(exception.getMessage());
+         }
+      }
    }
 
-   public final void a(NetworkManager var1, PacketType var2, Object ... var3) {
+   public final void broadcastPacketExcept(NetworkManager var1, PacketType var2, Object ... var3) {
       for(int var4 = 0; var4 < this.n.size(); ++var4) {
          if(this.n.get(var4) != var1) {
             try {
@@ -190,61 +236,90 @@
 
    public void run() {
       logger.info("Now accepting input on " + this.port);
-      int var1 = 50000000;
-      int var2 = 500000000;
-
+      int tickTime = 50000000; // 50 ms in nanoseconds
+      int saveInterval = 1200; // Save every 1200 ticks (1 minute)
+      int heartbeatInterval = 900; // Heartbeat every 900 ticks (45 seconds)
+      int broadcastCPEstuffInterval = 600; // 30 seconds
       try {
-         long var3 = System.nanoTime();
-         long var5 = System.nanoTime();
-         int var7 = 0;
-
-         while(true) {
-            this.d();
-
-            for(; System.nanoTime() - var5 > (long)var1; ++var7) {
-               var5 += (long)var1;
-               this.c();
-               if(var7 % 1200 == 0) {
-                  MinecraftServer var8 = this;
+         long lastTick = System.nanoTime();
+         long lastPing = System.nanoTime();
+         int tickCount = 0;
+
+         while (true) {
+            long now = System.nanoTime();
+
+            // Handle network operations
+            this.handleNetworkOperations();
+
+            // Tick the server
+            if (now - lastTick > tickTime) {
+               lastTick = now;
+               tickCount++;
 
+               scheduler.runTasks();
+
+               // Tick players and world
+               this.tickPlayersAndWorld();
+
+               // Save worlds
+               if (tickCount % saveInterval == 0) {
                   try {
-                     new LevelIO(var8);
-                     LevelIO.save(var8.mainLevel, new FileOutputStream("server_level.dat"));
-                  } catch (Exception var11) {
-                     logger.severe("Failed to save the level! " + var11);
+                     worldManager.saveWorld(worldManager.getActiveWorldName(), this.mainLevel);
+                     //logger.info("Level saved! Load: " + this.n.size() + "/" + this.maxPlayers);
+                  } catch (Exception e) {
+                     logger.severe("Failed to save the level! " + e);
                   }
-
-                  logger.info("Level saved! Load: " + this.n.size() + "/" + this.maxPlayers);
                }
 
-               if(var7 % 900 == 0) {
-                  HashMap var9;
-                  (var9 = new HashMap()).put("name", this.serverName);
-                  var9.put("users", Integer.valueOf(this.n.size()));
-                  var9.put("max", Integer.valueOf(this.maxPlayers - (this.adminSlot?1:0)));
-                  var9.put("public", Boolean.valueOf(this.public_));
-                  var9.put("port", Integer.valueOf(this.port));
-                  var9.put("salt", this.salt);
-                  var9.put("admin-slot", Boolean.valueOf(this.adminSlot));
-                  var9.put("version", Byte.valueOf((byte)7));
-                  String var13 = a((Map)var9);
-                  (new HeartbeatManager(this, var13)).start();
+               // Send heartbeat
+               if (tickCount % heartbeatInterval == 0 && this.announce) {
+                  HashMap<String, Object> data = new HashMap<>();
+                  data.put("name", this.serverName);
+                  data.put("users", this.n.size());
+                  data.put("max", this.maxPlayers - (this.adminSlot ? 1 : 0));
+                  data.put("public", this.public_);
+                  data.put("port", this.port);
+                  data.put("salt", this.saltGenerator.salt);
+                  data.put("admin-slot", this.adminSlot);
+                  data.put("version", (byte) 7);
+                  data.put("software", "Fukkit (modded Vanilla)");
+
+                  String heartbeatData = a(data);
+                  new HeartbeatManager(this, heartbeatData).start();
+               }
+
+               if (tickCount % broadcastCPEstuffInterval == 0)
+               {
+                  Environment environment = API.getInstance().getDefaultEnvironment();
+                  WeatherType weatherType = API.getInstance().getDefaultWeather();
+                  if (environment != null)
+                  {
+                     environment.broadcastToServer();
+                  }
+                  if (weatherType != null)
+                  {
+                     API.getInstance().broadcastWeather(weatherType);
+                  }
                }
             }
 
-            while(System.nanoTime() - var3 > (long)var2) {
-               var3 += (long)var2;
-               this.a(PacketType.PING, new Object[0]);
+            // Send ping
+            if (now - lastPing > 500000000) { // 500 ms
+               lastPing = now;
+               this.broadcastPacket(PacketType.PING, new Object[0]);
             }
 
-            Thread.sleep(5L);
-         }
-      } catch (Exception var12) {
-         logger.log(Level.SEVERE, "Error in main loop, server shutting down!", var12);
-         var12.printStackTrace();
+            // Small sleep to prevent busy-waiting
+            Thread.sleep(1);
+         }
+      } catch (Exception e) {
+         logger.log(java.util.logging.Level.SEVERE, "Error in main loop, server shutting down!", e);
+         e.printStackTrace();
       }
    }
 
+
+
    private static String a(Map var0) {
       try {
          String var1 = "";
@@ -264,7 +339,7 @@
       }
    }
 
-   private void c() {
+   private void tickPlayersAndWorld() {
       Iterator var1 = this.n.iterator();
 
       while(var1.hasNext()) {
@@ -281,7 +356,7 @@
 
       for(int var9 = 0; var9 < this.o.size(); ++var9) {
          UNKNOWN0 var10 = (UNKNOWN0)this.o.get(var9);
-         this.a(var10.networkHandler);
+         this.handlePlayerDisconnect(var10.networkHandler);
 
          try {
             NetworkHandler var3 = var10.networkHandler;
@@ -316,19 +391,19 @@
 
    }
 
-   public final void a(String var1) {
+   public final void logInfo(String var1) {
       logger.info(var1);
    }
 
-   public final void b(String var1) {
+   public final void logFine(String var1) {
       logger.fine(var1);
    }
 
-   private void d() {
+   private void handleNetworkOperations() {
       List var1 = this.v;
       synchronized(this.v) {
          while(this.v.size() > 0) {
-            this.a((NetworkManager)null, (String)this.v.remove(0));
+            this.executeCommand((NetworkManager)null, (String)this.v.remove(0));
          }
       }
 
@@ -337,7 +412,7 @@
 
          SocketChannel var14;
          while((var14 = var13.serverChannel.accept()) != null) {
-            try {
+            try { 
                var14.configureBlocking(false);
                NetworkHandler var2 = new NetworkHandler(var14);
                var13.c.add(var2);
@@ -363,7 +438,7 @@
                      var4.b(var3);
                   } else {
                      int var22;
-                     if((var22 = var4.e()) < 0) {
+                     if((var22 = var4.findFreePlayerSlot()) < 0) {
                         var3.send(PacketType.DISCONNECT, new Object[]{"The server is full!"});
                         logger.info(var3.address + " tried to connect, but failed because the server was full.");
                         var4.b(var3);
@@ -396,10 +471,17 @@
                   var19.in.flip();
                   byte var20 = var19.in.get(0);
                   PacketType var24;
-                  if((var24 = PacketType.packets[var20]) == null) {
-                     throw new IOException("Bad command: " + var20);
+
+                  var24 = PacketType.getByOpCode(var20);
+                  if (var24 == null)
+                  {
+                     throw new IOException("Bad opcode: " + var20 + " byte " + var20);
                   }
 
+                  // if((var24 = PacketType.packets[var20]) == null) {
+                  //    throw new IOException("Bad command: " + var20 + " PacketType: " + var24.toString());
+                  // }
+
                   if(var19.in.remaining() < var24.length + 1) {
                      var19.in.compact();
                      break;
@@ -412,7 +494,7 @@
                      var21[var7] = var19.receive(var24.params[var7]);
                   }
 
-                  var19.networkManager.a(var24, var21);
+                  var19.networkManager.handlePacket(var24, var21);
                   if(!var19.connected) {
                      break;
                   }
@@ -436,7 +518,7 @@
             try {
                if(!var15.connected) {
                   var15.close();
-                  var13.server.a(var15);
+                  var13.server.handlePlayerDisconnect(var15);
                   var13.c.remove(var17--);
                }
             } catch (Exception var8) {
@@ -449,7 +531,7 @@
       }
    }
 
-   public final void a(NetworkManager var1, String var2) {
+   public final void executeCommand(NetworkManager var1, String var2) {
       while(var2.startsWith("/")) {
          var2 = var2.substring(1);
       }
@@ -489,12 +571,12 @@
             }
          } else {
             if(var3[0].toLowerCase().equals("broadcast") && var3.length > 1) {
-               this.a(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var2.substring("broadcast ".length()).trim()});
+               this.broadcastPacket(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var2.substring("broadcast ".length()).trim()});
                return;
             }
 
             if(var3[0].toLowerCase().equals("say") && var3.length > 1) {
-               this.a(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var2.substring("say ".length()).trim()});
+               this.broadcastPacket(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var2.substring("say ".length()).trim()});
                return;
             }
 
@@ -519,11 +601,11 @@
       }
    }
 
-   public final void a(int var1, int var2, int var3) {
-      this.a(PacketType.BLOCK_CHANGE, new Object[]{Integer.valueOf(var1), Integer.valueOf(var2), Integer.valueOf(var3), Integer.valueOf(this.mainLevel.getTile(var1, var2, var3))});
+   public final void updateBlock(int var1, int var2, int var3) {
+      this.broadcastPacket(PacketType.BLOCK_CHANGE, new Object[]{Integer.valueOf(var1), Integer.valueOf(var2), Integer.valueOf(var3), Integer.valueOf(this.mainLevel.getTile(var1, var2, var3))});
    }
 
-   public final int a() {
+   public final int getAvailableSlots() {
       int var1 = 0;
 
       for(int var2 = 0; var2 < this.maxPlayers; ++var2) {
@@ -535,7 +617,7 @@
       return var1;
    }
 
-   private int e() {
+   private int findFreePlayerSlot() {
       for(int var1 = 0; var1 < this.maxPlayers; ++var1) {
          if(this.networkManager[var1] == null) {
             return var1;
@@ -557,17 +639,17 @@
          NetworkManager var4;
          if((var4 = (NetworkManager)var3.next()).playerName.equalsIgnoreCase(var1)) {
             var2 = true;
-            var4.a("You were kicked");
+            var4.kickPlayer("You were kicked");
          }
       }
 
       if(var2) {
-         this.a(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var1 + " got kicked from the server!"});
+         this.broadcastPacket(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var1 + " got kicked from the server!"});
       }
 
    }
 
-   private void e(String var1) {
+   public void e(String var1) {
       this.playerManager2.addPlayer(var1);
       boolean var2 = false;
       Iterator var3 = this.n.iterator();
@@ -576,17 +658,17 @@
          NetworkManager var4;
          if((var4 = (NetworkManager)var3.next()).playerName.equalsIgnoreCase(var1)) {
             var2 = true;
-            var4.a("You were banned");
+            var4.kickPlayer("You were banned");
          }
       }
 
       if(var2) {
-         this.a(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var1 + " got banned!"});
+         this.broadcastPacket(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var1 + " got banned!"});
       }
 
    }
 
-   private void f(String var1) {
+   public void f(String var1) {
       this.playerManager1.addPlayer(var1);
       Iterator var3 = this.n.iterator();
 
@@ -600,7 +682,7 @@
 
    }
 
-   private void g(String var1) {
+   public void g(String var1) {
       this.playerManager1.removePlayer(var1);
       Iterator var3 = this.n.iterator();
 
@@ -635,7 +717,7 @@
 
          var6 = var5.networkHandler;
          this.playerManager3.addPlayer(var5.networkHandler.address);
-         var5.a("You were banned");
+         var5.kickPlayer("You were banned");
          if(var3 == "") {
             var3 = var3 + ", ";
          }
@@ -645,7 +727,7 @@
       }
 
       if(var2) {
-         this.a(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var3 + " got ip banned!"});
+         this.broadcastPacket(PacketType.CHAT_MESSAGE, new Object[]{Integer.valueOf(-1), var3 + " got ip banned!"});
       }
 
    }
@@ -663,44 +745,44 @@
       return var2;
    }
 
-   public static void main(String[] var0) {
+   public static void main(String[] args) {
       try {
-         MinecraftServer var6;
-         MinecraftServer var1 = var6 = new MinecraftServer();
-         logger.info("Setting up");
-         File var2;
-         if((var2 = new File("server_level.dat")).exists()) {
-            try {
-               var1.mainLevel = (new LevelIO(var1)).load(new FileInputStream(var2));
-            } catch (Exception var4) {
-               logger.warning("Failed to load level. Generating a new level");
-               var4.printStackTrace();
+         // Create and initialize the server
+         MinecraftServer server = new MinecraftServer();
+         API.initialize(server);
+         logger.info("Setting up server");
+
+         // Load or create the main world using WorldManager
+         String mainWorldName = server.properties.getProperty("world-name", "world");
+         server.mainLevel = server.worldManager.loadWorld(mainWorldName);
+
+         if (server.mainLevel == null) {
+            logger.info("Main world not found. Creating a new world.");
+            logger.info("Using seed: " + server.seed);
+
+            // Create the new world using WorldManager
+            server.mainLevel = server.worldManager.createWorld(mainWorldName, server.seed, "default");
+
+            if (server.mainLevel == null) {
+               throw new RuntimeException("Failed to create the main world");
             }
-         } else {
-            logger.warning("No level file found. Generating a new level");
          }
 
-         if(var1.mainLevel == null) {
-            var1.mainLevel = (new LevelGenerator(var1)).generate("--", 256, 256, 64);
-         }
+         // Set up world properties
+         server.mainLevel.creativeMode = true;
+         server.mainLevel.growTrees = Boolean.parseBoolean(server.properties.getProperty("grow-trees", "false"));
+         server.mainLevel.addListener$74652038(server);
 
-         try {
-            new LevelIO(var1);
-            LevelIO.save(var1.mainLevel, new FileOutputStream("server_level.dat"));
-         } catch (Exception var3) {
-            ;
-         }
+         // Start the server thread
+         new Thread(server).start();
 
-         var1.mainLevel.creativeMode = true;
-         var1.mainLevel.growTrees = var1.growTrees;
-         var1.mainLevel.addListener$74652038(var1);
-         (new Thread(var6)).start();
-      } catch (Exception var5) {
+      } catch (Exception e) {
          logger.severe("Failed to start the server!");
-         var5.printStackTrace();
+         e.printStackTrace();
       }
    }
 
+
    // $FF: synthetic method
    static List a(MinecraftServer var0) {
       return var0.v;
@@ -738,4 +820,9 @@
          logger.warning("Failed to open file server.log for writing: " + var5);
       }
    }
+
+   public WorldManager getWorldManager()
+   {
+      return worldManager;
+   }
 }
