--- a/src/com/mojang/minecraft/level/generator/LevelGenerator.java
+++ b/src/com/mojang/minecraft/level/generator/LevelGenerator.java
@@ -1,38 +1,82 @@
 package com.mojang.minecraft.level.generator;
 
+import com.fukkit.Location;
 import com.mojang.minecraft.level.Level;
 import com.mojang.minecraft.level.generator.noise.CombinedNoise;
 import com.mojang.minecraft.level.generator.noise.OctaveNoise;
 import com.mojang.minecraft.level.tile.Block;
 import com.mojang.minecraft.server.MinecraftServer;
 import com.mojang.util.MathHelper;
+
 import java.util.ArrayList;
 import java.util.Random;
 
-public final class LevelGenerator {
+public class LevelGenerator {
 
    private MinecraftServer server;
-   private int width;
-   private int depth;
-   private int height;
-   private Random random = new Random();
-   private byte[] blocks;
-   private int waterLevel;
-   private int[] h = new int[1048576];
+   public int width = 256;
+   public int depth = 256;
+   public int height = 64;
+   public Random random;
+   public byte[] blocks;
+   public int waterLevel = 32;
+   private ArrayList<Integer> h = new ArrayList<>();
+
+   public void setWaterLevel(int waterLevel)
+   {
+      this.waterLevel = waterLevel;
+   }
+
+   public int getWaterLevel()
+   {
+      return this.waterLevel;
+   }
+
+   public int getWidth()
+   {
+      return width;
+   }
+
+   public int getDepth()
+   {
+      return depth;
+   }
+
+   public int getHeight()
+   {
+      return height;
+   }
 
+   public void setHeight(int h)
+   {
+      this.height = h;
+   }
+
+   public void setDepth(int d)
+   {
+      this.depth = d;
+   }
+
+   public void setWidth(int w)
+   {
+      this.width = w;
+   }
+
+   public LevelGenerator(MinecraftServer var1, long seed) {
+      this.server = var1;
+      this.random = new Random(seed);
+   }
 
    public LevelGenerator(MinecraftServer var1) {
       this.server = var1;
+      this.random = new Random();
    }
 
-   public final Level generate(String var1, int var2, int var3, int var4) {
-      this.server.a("Generating level");
-      this.width = 256;
-      this.depth = 256;
-      this.height = 64;
-      this.waterLevel = 32;
+   public Level generate(String var1) {
+      int var3;
+      this.server.logInfo("Generating level");
       this.blocks = new byte[256 << 8 << 6];
-      this.server.b("Raising..");
+      this.server.logFine("Raising..");
       LevelGenerator var41 = this;
       CombinedNoise var5 = new CombinedNoise(new OctaveNoise(this.random, 8), new OctaveNoise(this.random, 8));
       CombinedNoise var6 = new CombinedNoise(new OctaveNoise(this.random, 8), new OctaveNoise(this.random, 8));
@@ -59,7 +103,7 @@
          }
       }
 
-      this.server.b("Eroding..");
+      this.server.logFine("Eroding..");
       int[] var42 = var8;
       var41 = this;
       var6 = new CombinedNoise(new OctaveNoise(this.random, 8), new OctaveNoise(this.random, 8));
@@ -79,7 +123,7 @@
          }
       }
 
-      this.server.b("Soiling..");
+      this.server.logFine("Soiling..");
       var42 = var8;
       var41 = this;
       int var45 = this.width;
@@ -125,7 +169,7 @@
          }
       }
 
-      this.server.b("Carving..");
+      this.server.logFine("Carving..");
       boolean var46 = true;
       boolean var43 = false;
       var41 = this;
@@ -183,7 +227,7 @@
       this.populateOre(Block.COAL_ORE.id, 90, 1, 4);
       this.populateOre(Block.IRON_ORE.id, 70, 2, 4);
       this.populateOre(Block.GOLD_ORE.id, 50, 3, 4);
-      this.server.b("Watering..");
+      this.server.logFine("Watering..");
       var41 = this;
       var51 = Block.STATIONARY_WATER.id;
 
@@ -208,7 +252,7 @@
          }
       }
 
-      this.server.b("Melting..");
+      this.server.logFine("Melting..");
       var41 = this;
       var45 = this.width * this.depth * this.height / 20000;
 
@@ -221,7 +265,7 @@
          }
       }
 
-      this.server.b("Growing..");
+      this.server.logFine("Growing..");
       var42 = var8;
       var41 = this;
       var45 = this.width;
@@ -251,7 +295,7 @@
          }
       }
 
-      this.server.b("Planting..");
+      this.server.logFine("Planting..");
       var42 = var8;
       var41 = this;
       var45 = this.width;
@@ -405,8 +449,8 @@
 
    private long flood(int var1, int var2, int var3, int var4, int var5) {
       byte var20 = (byte)var5;
-      ArrayList var21 = new ArrayList();
-      byte var6 = 0;
+      ArrayList<ArrayList<Integer>> var21 = new ArrayList<>();
+      int var6 = 0;
       int var7 = 1;
 
       int var8;
@@ -421,16 +465,16 @@
       int var9 = this.depth - 1;
       int var10 = this.width - 1;
       int var22 = var6 + 1;
-      this.h[0] = ((var2 << var8) + var3 << var7) + var1;
+      this.h.add(((var2 << var8) + var3 << var7) + var1);
       long var11 = 0L;
       var1 = this.width * this.depth;
 
       while(var22 > 0) {
          --var22;
-         var2 = this.h[var22];
+         var2 = this.h.remove(this.h.size() - 1);
          if(var22 == 0 && var21.size() > 0) {
-            this.h = (int[])var21.remove(var21.size() - 1);
-            var22 = this.h.length;
+            this.h = var21.remove(var21.size() - 1);
+            var22 = this.h.size();
          }
 
          var3 = var2 >> var7 & var9;
@@ -462,13 +506,8 @@
             boolean var19;
             if(var3 > 0) {
                if((var19 = this.blocks[var2 - this.width] == 0) && !var23) {
-                  if(var22 == this.h.length) {
-                     var21.add(this.h);
-                     this.h = new int[1048576];
-                     var22 = 0;
-                  }
-
-                  this.h[var22++] = var2 - this.width;
+                  this.h.add(var2 - this.width);
+                  var22++;
                }
 
                var23 = var19;
@@ -476,13 +515,8 @@
 
             if(var3 < this.depth - 1) {
                if((var19 = this.blocks[var2 + this.width] == 0) && !var24) {
-                  if(var22 == this.h.length) {
-                     var21.add(this.h);
-                     this.h = new int[1048576];
-                     var22 = 0;
-                  }
-
-                  this.h[var22++] = var2 + this.width;
+                  this.h.add(var2 + this.width);
+                  var22++;
                }
 
                var24 = var19;
@@ -495,13 +529,8 @@
                }
 
                if((var19 = var25 == 0) && !var18) {
-                  if(var22 == this.h.length) {
-                     var21.add(this.h);
-                     this.h = new int[1048576];
-                     var22 = 0;
-                  }
-
-                  this.h[var22++] = var2 - var1;
+                  this.h.add(var2 - var1);
+                  var22++;
                }
 
                var18 = var19;
@@ -513,4 +542,151 @@
 
       return var11;
    }
-}
+
+    /**
+     * Gets the block type at specific coordinates.
+     *
+     * @param x X-coordinate.
+     * @param y Y-coordinate.
+     * @param z Z-coordinate.
+     * @return Block type ID at the specified coordinates.
+     */
+    protected int getBlockType(int x, int y, int z) {
+      if (!isInBounds(x, y, z)) {
+          throw new IndexOutOfBoundsException("Coordinates out of bounds.");
+      }
+      return blocks[(y * depth + z) * width + x];
+  }
+
+  /**
+   * Sets the block type at specific coordinates.
+   *
+   * @param x X-coordinate.
+   * @param y Y-coordinate.
+   * @param z Z-coordinate.
+   * @param blockId Block type ID to set.
+   */
+  protected void setBlockType(int x, int y, int z, int blockId) {
+      if (!isInBounds(x, y, z)) {
+          throw new IndexOutOfBoundsException("Coordinates out of bounds.");
+      }
+      blocks[(y * depth + z) * width + x] = (byte) blockId;
+  }
+
+  /**
+   * Checks if the coordinates are within bounds of the level.
+   *
+   * @param x X-coordinate.
+   * @param y Y-coordinate.
+   * @param z Z-coordinate.
+   * @return true if within bounds, false otherwise.
+   */
+  protected boolean isInBounds(int x, int y, int z) {
+      return x >= 0 && x < width && y >= 0 && y < height && z >= 0 && z < depth;
+  }
+
+  /**
+   * Gets the block type at a specific index in the blocks array.
+   *
+   * @param index Index in the blocks array.
+   * @return Block type ID at the specified index.
+   */
+  protected int getBlockTypeAtIndex(byte index) {
+      if (index < 0 || index >= blocks.length) {
+          throw new IndexOutOfBoundsException("Index out of bounds.");
+      }
+      return blocks[index];
+  }
+
+  /**
+   * Sets the block type at a specific index in the blocks array.
+   *
+   * @param index Index in the blocks array.
+   * @param blockId Block type ID to set.
+   */
+  protected void setBlockTypeAtIndex(int index, byte blockId) {
+      if (index < 0 || index >= blocks.length) {
+          throw new IndexOutOfBoundsException("Index out of bounds.");
+      }
+      blocks[index] = (byte) blockId;
+  }
+
+  /**
+   * Clears a rectangular region in the level.
+   *
+   * @param x1 Start X-coordinate.
+   * @param y1 Start Y-coordinate.
+   * @param z1 Start Z-coordinate.
+   * @param x2 End X-coordinate.
+   * @param y2 End Y-coordinate.
+   * @param z2 End Z-coordinate.
+   * @param blockId Block type to set in the region.
+   */
+  protected void clearRegion(int x1, int y1, int z1, int x2, int y2, int z2, byte blockId) {
+      for (int x = x1; x <= x2; x++) {
+          for (int y = y1; y <= y2; y++) {
+              for (int z = z1; z <= z2; z++) {
+                  setBlockType(x, y, z, blockId);
+              }
+          }
+      }
+  }
+
+  /**
+   * Fills a rectangular region with the specified block type.
+   *
+   * @param x1 Start X-coordinate.
+   * @param y1 Start Y-coordinate.
+   * @param z1 Start Z-coordinate.
+   * @param x2 End X-coordinate.
+   * @param y2 End Y-coordinate.
+   * @param z2 End Z-coordinate.
+   * @param blockId Block type to fill the region with.
+   */
+  protected void fillRegion(int x1, int y1, int z1, int x2, int y2, int z2, byte blockId) {
+      for (int x = x1; x <= x2; x++) {
+          for (int y = y1; y <= y2; y++) {
+              for (int z = z1; z <= z2; z++) {
+                  setBlockType(x, y, z, blockId);
+              }
+          }
+      }
+  }
+
+  protected void fillRegion(Location loc1, Location loc2, byte blockId) {
+   this.fillRegion(loc1.getX(), loc1.getY(), loc1.getZ(), loc2.getX(), loc2.getY(), loc2.getZ(), blockId);
+  }
+
+  /**
+   * Creates a horizontal layer at a specific Y-coordinate.
+   *
+   * @param y Y-coordinate.
+   * @param blockId Block type to set.
+   */
+  protected void createHorizontalLayer(int y, byte blockId) {
+      if (y < 0 || y >= height) {
+          throw new IndexOutOfBoundsException("Y-coordinate out of bounds.");
+      }
+      for (int x = 0; x < width; x++) {
+          for (int z = 0; z < depth; z++) {
+              setBlockType(x, y, z, blockId);
+          }
+      }
+  }
+
+  /**
+   * Creates a vertical column at a specific X and Z-coordinate.
+   *
+   * @param x X-coordinate.
+   * @param z Z-coordinate.
+   * @param blockId Block type to set.
+   */
+  protected void createVerticalColumn(int x, int z, byte blockId) {
+      if (!isInBounds(x, 0, z)) {
+          throw new IndexOutOfBoundsException("Coordinates out of bounds.");
+      }
+      for (int y = 0; y < height; y++) {
+          setBlockType(x, y, z, blockId);
+      }
+  }
+}
\ No newline at end of file
